&use {std/text_io.py}

-- Define an error at runtime with the id of 69 NOT RECOMMENDED --
DEFINE_ERROR TEAPOT 415
-- Define an error at runtime with autogeneration of ID --
DEFINE_ERROR OTHER_ERR

module what
    export set test_var, 90
    pub fn test
        raise :_meta.err.TEAPOT
        return this
    end
end

fn match_error error
    match :error
        with 0
            io:println "Success!"
        end
        case [:error < [LenOf :_meta.err.builtins]]
            set temp [:_meta.err :error]
            io:println 'Built in error [${error}]: ${temp}'
            fallthrough
        end
        with 69
            # ;)
            io:println [Sum "Nice error [" :error "]: " [:_meta.err :error]]
        end
        with 415
            io:println [Sum "Teapot! [" :error "]: " [:_meta.err :error]]
        end
        default
            io:println [Sum "Unknown error [" :error "]: " [:_meta.err :error]]
        end
    end
end

# The results are packed into 'result' and if successful the error is 0 otherwise its the error id
smcatch [?list error, result] what.test
match_error :error
scatch [?list error, result] what.test
match_error :error
safe what.test

io:println [Sum "90" 90]
io:println true false nil none ...
fn test
    pass
end