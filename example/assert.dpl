&use {std/text_io.py}
&use {std/to_py.py}
&use {std/tests.py}
&use:luaj {std-lua/iter_utils.lua}

-- Define a python callable --
body to_py:define div10
    set _export [[:args 0] // 10]
end

-- Define a list --
set list !list

-- Manipulate the list --
pass [:list@append 90]

-- Intentionally make an error --
pass [:list@extend [?list 180 2799]]

-- Print the list --
# [90, 180, 270]
io:println "Before Map:" :list

-- Map div10 to the list --
pass [@iter_utils:map :div10 :list]
# [9, 18, 27]

--
  Just testing the pprint functions handling of
  cyclic references.
--
pass [:list@append :list]

-- Test it with assert --
tests:assert [:list==[?list 9, 18, 27]], 'Expected [9, 18, 27] but got ${list}'
io:println "After Map:" :list
