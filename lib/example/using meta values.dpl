# Using meta values to make a custom type.

import "text_io.py"

object my_int
method %my_int new default
    new _global.my_int temp
    set name{temp.[meta_value]} %default
    return :temp
end
method %my_int inc
    set name{self.[meta_value]} (%{self.[meta_value]} + 1)
end
set name{my_int.new.defs.default} 0

# new my_int of 90
catch [mine] my_int.new 90
io raw_println %mine
# 180
io raw_println (%mine * 2)
# 91
mine.inc
io raw_println %mine